#spring.main.web-application-type=none
#webserver port(default : 8080, 0으로 하면 random port)
server.port=8888
#ssl 적용 (keytool 이용해서 인증서 만든 후 application root에 위치)
#ssl 적용시 https 접속(http도 접속 가능하게 하려면 Applition.java 에 추가 Connector 설정)
#server.ssl.key-store=keystore.p12
#server.ssl.key-store-type=PKCS12
#server.ssl.key-store-password=123456
#server.ssl.key-alias=spring

#Property예제
kkk=KKKKKKKK
randomvalue=${random.int} ${kkk} AAAAAAA
bnzprops.age=10
bnzprops.full-name=bonzo
bnzprops.name=bnz


#정적리소스
# - 기본 리소스 위치 classpath: /static /public /resources /META-INF/resources
# - (localhost/hello.html  -> localhost/static/hello.html 로 요청해야 함)
#spring.mvc.static-path-pattern=/static/**
# - 이방법 보다는 WebConfig.java 의 addResourceHandlers를 이용하는 걸 추천(기본 정적 리소스path는 유지하면서 추가 설정 가능)

#thymeleaf 사용시 재구동없이 바로 반영
spring.thymeleaf.cache=false

# h2 - inmemory db http://localhost:8888/h2-console 접속 가능
# SampleRunner 참고(구동시 create db, insert)
spring.h2.console.enabled=false

# jdbc사용(mysql, postgresSQL 등.. db는 개별 설치)
#-------------------create database springbootdb DEFAULT character set utf8;
#-------------------drop user bonzo@localhost;
#-------------------create user bonzo@localhost IDENTIFIED by 'dhtmdwns1!';
#-------------------create user 'bonzo'@'%' IDENTIFIED by 'dhtmdwns1!';
#-------------------grant all PRIVILEGES on *.* to bonzo@localhost IDENTIFIED by 'dhtmdwns1!' with grant option;
#-------------------flush PRIVILEGES;
#spring.datasource.hikari.maximum-pool-size=4
#spring.datasource.url=jdbc:mysql://localhost:3306/springbootdb
#spring.datasource.username=bonzo
#spring.datasource.password=dhtmdwns1!


#CREATE TABLE "ACCOUNT"
#(	ID       NUMBER(15,0) NOT NULL,
#   USERNAME VARCHAR2(50) NOT NULL,
#   PASSWORD VARCHAR2(200),
#   PRIMARY KEY ("ID"));
#
# CREATE TABLE AU01
# (  LOB_CD    VARCHAR2(50) NOT NULL,
# ITEM_NAME VARCHAR2(50) NOT NULL,
# SEQ_NO     NUMBER(15,0) NOT NULL,
# ITEM_ATTR01 VARCHAR2(50) ,
# ITEM_ATTR02 VARCHAR2(50) ,
# ITEM_ATTR03 VARCHAR2(50) ,
# ITEM_ATTR04 VARCHAR2(50) ,
# ITEM_ATTR05 NUMBER(15,0) ,
# PRIMARY KEY (LOB_CD, ITEM_NAME, SEQ_NO));
#
# CREATE TABLE AU02
# (  LOB_CD    VARCHAR2(50) NOT NULL,
# ITEM_NAME VARCHAR2(50) NOT NULL,
# ITEM_DETL VARCHAR2(50) NOT NULL,
# SEQ_NO     NUMBER(15,0) NOT NULL,
# ITEM_DETL_ATTR01 VARCHAR2(50) ,
# ITEM_DETL_ATTR02 VARCHAR2(50) ,
# ITEM_DETL_ATTR03 VARCHAR2(50) ,
# ITEM_DETL_ATTR04 VARCHAR2(50) ,
# ITEM_DETL_ATTR05 NUMBER(15,0) ,
# PRIMARY KEY (LOB_CD, ITEM_NAME, ITEM_DETL, SEQ_NO));

# 데이터베이스 연결 정보
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/XE
spring.datasource.username=g2m
spring.datasource.password=g2m1!g2m2@

# JPA 설정
# spring.jpa.database-platform=org.hibernate.dialect.OracleDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# 커넥션 풀 (HikariCP) 설정 (선택)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=1800000


springdoc.swagger-ui.csrf.enabled=true

# MyBatis
# 아래방식은 xml파일을 src/main/java 하위에 두고 싶을때...(비추천)
mybatis.mapper-locations=file:src/main/java/com/bnz/samg/**/*Query.xml
# 아래방식은 src/main/resources 하위에 놓는경우(default)
# mybatis.mapper-locations=classpath:mapper/*Query.xml
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.call-setters-on-nulls=true
mybatis.configuration.jdbc-type-for-null=NULL



#로깅(기본 INFO 로깅) ########################################
logging.level.root=INFO
    # MyBatis SQL 로그
logging.level.org.mybatis=DEBUG
    # MyBatis 내부 SQL 매핑 정보 (선택)
logging.level.org.apache.ibatis=DEBUG
logging.level.org.apache.ibatis.mapping=DEBUG
logging.level.org.apache.ibatis.logging.stdout.StdOutImpl=DEBUG
logging.level.org.apache.ibatis.executor.resultset=DEBUG
logging.level.org.apache.ibatis.executor.statement=DEBUG
    # Spring Data JPA 관련 로그
logging.level.org.springframework.data.jpa=DEBUG
    # Hibernate SQL 로그
    # logging.level.org.hibernate=DEBUG
logging.level.org.hibernate.SQL=DEBUG
    # Hibernate 파라미터 바인딩 로그
logging.level.org.hibernate.type.descriptor.sql=TRACE

# Spring Web 요청/응답 정보를 확인하려면:
logging.level.org.springframework.web=DEBUG


telegram.bot.username=bzNotiTestBot
telegram.bot.token=777630358:AAElntpm3KBBIshGfBMqL_65VYKqbX3Xn-I


#logging.file=aaa.log
#logging.path=logdir
#로깅packge단위로
logging.level.com.bnz=DEBUG


